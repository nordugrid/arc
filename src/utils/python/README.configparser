######################################################################
######### General arc.conf python parser usage examples ##############
######################################################################

With '--option' arcconfig-parser returns the value of the passed option to stdout.
Without '--option' arcconfig-parser can be used to operate with blocks:
 * check blocks existance (exit code used to indicate the status of the check)
 * return the list of subblocks
With '--export' option arcconfig-parser allows to export config in the following formats:
 * json - returns entire configuration or subset of blocks as-is in JSON to stdout
 * bash - for 'common' block or specified configuration subset returns 'CONFIG_option_name=value' 
   pairs to stdout. Block names IS NOT included in the exports and option values precedence 
   will be used in the order of passed blocks. If automatic subblocks expansion used with
   bash export, for every block in sequence - it's subblocks are processed first (in arc.conf defined order).

Examples:

## 1. Get value of option in block:

# arcconfig-parser --block infosys --option providerlog
/var/log/arc/infoprovider.log

## 2. Get value of option in blocks (in order they are specified, e.g. if not
found in 'gridftpd' look in the 'common' block):

# arcconfig-parser --block gridftpd --block common --option x509_user_key
/etc/grid-security/hostkey.pem

## 3. Export entire configuration to JSON:
arcconfig-parser --export json
HINT: use 'arcconfig-parser --export json | jq .' to view highlighted JSON structure in shell

## 4. Export block options to JSON (for Perl):
arcconfig-parser --block infosys --export json
{"infosys": {"registrationlog": "/var.....

## 5. Export blocks and their subblocks options to JSON
# arcconfig-parser --block infosys --subblocks --export json
{"infosys/admindomain": {"www": "http://e....

## 6. Export for BASH (compatible with current config representation in shell-based LRMS backends)

# arcconfig-parser --block infosys --block arex --block common --export bash
CONFIG_controldir="/var/spool/arc/jobstatus"
CONFIG_defaultttl="1210000"
CONFIG_delegationdb="sqlite"
CONFIG_hostname="sample1.nordugrid.org"
CONFIG_maaxrerun="5"
CONFIG_maxjobs="10000 -1"
CONFIG_runtimedir="/home/grid/arc/runtime"
CONFIG_sessiondir="__array__" # <= NEW define for multivalued values that indicate indexed vars
CONFIG_sessiondir_0="/mnt/scratch/grid/arc/session"
CONFIG_sessiondir_1="/home/grid/arc/session drain"
...

## 7. Using BASH export

# eval "$( arcconfig-parser --block infosys --block arex --block common --export bash )"
# echo "$CONFIG_gridmap"

## 8. Check block(s) exists ([common/perflog] is not exists in the example)

# arcconfig-parser --block common/perflog --block arex
# echo $?
1

## 9. List block subblocks

# arcconfig-parser --block infosys --subblocks
infosys
infosys/ldap
infosys/ldap/bdii
infosys/nordugrid
infosys/glue2
infosys/glue2/ldap
infosys/glue1

## 10. Using parser as Python module

    from arc.utils import config

    config.parse_arc_conf('/tmp/arc.conf')

    # get list of all 'queue' subblocks sorted by name
    >>> sb = config.get_subblocks(['queue'], is_sorted=True) 
    >>> sb
    ['queue:grid', 'queue:grid_rt']

    # get value of 'x509_host_key' from 'arex' block and than from 'common' if not found in 'arex'
    >>> a = config.get_value('x509_host_key', ['arex', 'common'])
    >>> a
    '/etc/grid-security/hostkey.pem'

    # get value of 'allowunknown' option from 'gridftpd' blocks
    >>> b = config.get_value('allowunknown', 'gridftpd')
    >>> b
    'yes'

    # get value of 'allowunknown' option from 'gridftpd' blocks (always return list)
    >>> c = config.get_value('allowunknown', 'gridftpd', force_list=True)
    >>> c
    ['yes']

    # get value of 'allowunknown' option from 'gridftpd' blocks (return boolean value)
    >>> d = config.get_value('allowunknown', 'gridftpd', bool_yesno=True)
    >>> d
    True

